"""
This script contains the core logic for processing user inputs in the voice assistant application. 
It includes:
1. Speech-to-text functionality using Watson Speech-to-Text API.
2. Text-to-speech functionality using Watson Text-to-Speech API.
3. Integration with OpenAI GPT for intelligent text-based responses.
"""

from openai import OpenAI
import requests

# Initialize OpenAI client
openai_client = OpenAI(api_key="YOUR_OPENAI_API_KEY")  # Enter your OpenAI API key here

# Function: Convert speech (audio binary) to text
def speech_to_text(audio_binary):
    """
    Use Watson Speech-to-Text API to convert user-provided audio into text.

    Args:
        audio_binary (bytes): Binary audio data from user.

    Returns:
        str: Transcribed text from the audio.
    """
    base_url = "https://sn-watson-stt.labs.skills.network"  # Replace with your Watson STT base URL
    api_url = base_url + '/speech-to-text/api/v1/recognize'
    params = {'model': 'en-US_Multimedia'}  # Specify the speech recognition model

    response = requests.post(api_url, params=params, data=audio_binary).json()
    text = 'null'
    while bool(response.get('results')):
        print('Speech-to-text response:', response)
        text = response.get('results').pop().get('alternatives').pop().get('transcript')
        print('Recognized text:', text)
        return text

# Function: Convert text to speech
def text_to_speech(text, voice=""):
    """
    Use Watson Text-to-Speech API to convert text into spoken audio.

    Args:
        text (str): Text to be converted to speech.
        voice (str): User's preferred voice (optional).

    Returns:
        bytes: Audio data in WAV format.
    """
    base_url = "https://sn-watson-tts.labs.skills.network"  # Replace with your Watson TTS base URL
    api_url = base_url + '/text-to-speech/api/v1/synthesize?output=output_text.wav'
    if voice and voice != "default":
        api_url += "&voice=" + voice  # Add voice parameter if specified

    headers = {
        'Accept': 'audio/wav',
        'Content-Type': 'application/json',
    }
    json_data = {'text': text}

    response = requests.post(api_url, headers=headers, json=json_data)
    print('Text-to-speech response:', response)
    return response.content

# Function: Process user message with OpenAI GPT
def openai_process_message(user_message):
    """
    Use OpenAI GPT to generate a response based on user input.

    Args:
        user_message (str): Input text from the user.

    Returns:
        str: Response generated by OpenAI GPT.
    """
    prompt = "Act like a personal assistant. You can respond to questions, translate sentences, summarize news, and give recommendations."
    openai_response = openai_client.chat.completions.create(
        model="gpt-3.5-turbo", 
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": user_message}
        ],
        max_tokens=4000
    )
    print("OpenAI response:", openai_response)
    response_text = openai_response.choices[0].message.content
    return response_text
